Assignment 01

You are given list of numbers, obtained by rotating a sorted list an unknown number of times.

Write a function to determine the minimum number of times the original sorted list was rotated to obtain the given list.
Your function should have the worst-case complexity of O(log N), where N is the length of the list. You can assume that
all the numbers in the list are unique.
Example: The list [5, 6, 9, 0, 2, 3, 4] was obtained by rotating the sorted list [0, 2, 3, 4, 5, 6, 9] 3 times.

We define "rotating a list" as removing the last element of the list and adding it before the first element.
E.g. rotating the list [3, 2, 4, 1] produces [1, 3, 2, 4].

"Sorted list" refers to a list where the elements are arranged in the increasing order e.g. [1, 3, 5, 7].

BREAKDOWN:

1 - Rotating Sorted list, number of times Unknown
2 - Determine the minimum the original list was rotated
3 - Complexity expected of O(log N), N = len(list)
4 - List has unique values
5 - List is rotate by moving the last element to index 0

SOLUTION

Find highest number on the list and check distance from index 0.
This will give me how many times the list was rotated. I assume the list will always be rotated at least once and
it cannot be rotated more than its length.